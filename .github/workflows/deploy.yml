name: Deploy React Application with HTTPS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Test build job - runs on both PR and main push
  test-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Validate Environment Variables
        run: |
          echo "=== ENVIRONMENT VALIDATION ==="
          if [ -z "${{ secrets.VITE_API_URL }}" ]; then
            echo "❌ Error: VITE_API_URL is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}" ]; then
            echo "❌ Error: VITE_STRIPE_PUBLISHABLE_KEY is not set"
            exit 1
          fi
          echo "✅ VITE_API_URL: ${{ secrets.VITE_API_URL }}"
          echo "✅ VITE_STRIPE_PUBLISHABLE_KEY: ${VITE_STRIPE_PUBLISHABLE_KEY:0:20}..."

      - name: Install dependencies and build locally (for validation)
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}
        run: |
          echo "=== LOCAL BUILD VALIDATION ==="
          npm install --legacy-peer-deps
          npm run build
          echo "✅ Local build successful"

          # Check if Stripe key is in built files
          if grep -r "pk_test_" dist/assets/ 2>/dev/null; then
            echo "✅ Stripe key found in build output"
          else
            echo "❌ Warning: Stripe key not found in build output"
          fi

      - name: Test Docker Build (without push)
        run: |
          echo "=== DOCKER BUILD TEST ==="
          docker build \
            --no-cache \
            --build-arg VITE_API_URL="${{ secrets.VITE_API_URL }}" \
            --build-arg VITE_STRIPE_PUBLISHABLE_KEY="${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}" \
            --progress=plain \
            -t rizz336/needle360-frontend:test \
            -f Dockerfile .
          echo "✅ Docker build test successful"

  # Build and push job - only runs on main branch push
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test-build
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          echo "=== DOCKER BUILD AND PUSH ==="
          docker build \
            --no-cache \
            --build-arg VITE_API_URL="${{ secrets.VITE_API_URL }}" \
            --build-arg VITE_STRIPE_PUBLISHABLE_KEY="${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}" \
            --progress=plain \
            -t rizz336/needle360-frontend:$GITHUB_SHA \
            -t rizz336/needle360-frontend:latest \
            -f Dockerfile .
            
          echo "=== DOCKER PUSH ==="
          docker push rizz336/needle360-frontend:$GITHUB_SHA
          docker push rizz336/needle360-frontend:latest

  # Deploy job - only runs on main branch push after successful build
  deploy:
    needs: build
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Ensure network exists
        run: docker network create needle360-network || true

      - name: Clean up old frontend container
        run: |
          echo "=== CLEANUP ==="
          docker stop needle360-frontend-container || true
          docker rm needle360-frontend-container || true

      - name: Check and free ports
        run: |
          echo "=== PORT CHECK ==="
          if sudo lsof -i :80; then 
            echo "Port 80 in use, killing processes..."
            sudo fuser -k 80/tcp || true
          fi
          if sudo lsof -i :443; then 
            echo "Port 443 in use, killing processes..."
            sudo fuser -k 443/tcp || true
          fi
          sleep 3

      - name: Verify SSL certificates
        run: |
          echo "=== SSL VERIFICATION ==="
          if ! sudo test -f "/home/ubuntu/needle360/ssl/fullchain.crt"; then
            echo "❌ SSL certificate not found"
            exit 1
          fi
          if ! sudo test -f "/home/ubuntu/needle360/ssl/private.key"; then
            echo "❌ SSL private key not found"
            exit 1
          fi
          echo "✅ SSL certificates found"

      - name: Wait for backend to be ready
        run: |
          echo "=== WAITING FOR BACKEND ==="
          for i in {1..60}; do
            if docker exec needle360-backend-container curl -s -f http://localhost:4000 >/dev/null 2>&1; then
              echo "✅ Backend is ready"
              break
            fi
            echo "⏳ Waiting for backend... ($i/60)"
            sleep 5
          done

      - name: Deploy frontend container
        run: |
          echo "=== DEPLOYMENT ==="
          docker run -d \
            -p 80:80 \
            -p 443:443 \
            -v /home/ubuntu/needle360/ssl:/home/ubuntu/needle360/ssl:ro \
            --name needle360-frontend-container \
            --restart unless-stopped \
            --network needle360-network \
            -e NODE_ENV=production \
            --health-cmd="curl -f http://localhost:80/ || exit 1" \
            --health-interval=30s \
            --health-timeout=3s \
            --health-retries=3 \
            rizz336/needle360-frontend:latest

      - name: Verify deployment
        run: |
          echo "=== DEPLOYMENT VERIFICATION ==="
          sleep 10

          # Check container status
          docker ps | grep needle360-frontend-container

          # Check if backend is reachable from frontend container
          if docker exec needle360-frontend-container nslookup needle360-backend-container; then
            echo "✅ Backend DNS resolution works"
          else
            echo "❌ Backend DNS resolution failed"
          fi

          # Test internal connectivity
          if docker exec needle360-frontend-container wget -q --spider http://needle360-backend-container:4000; then
            echo "✅ Frontend can reach backend internally"
          else
            echo "❌ Frontend cannot reach backend internally"
            docker logs --tail 20 needle360-backend-container
          fi

          # Test external endpoints
          echo "Testing HTTP redirect:"
          curl -v -I http://needle360.online || echo "HTTP test failed"

          echo "Testing HTTPS:"
          curl -v -k -I https://needle360.online || echo "HTTPS test failed"
